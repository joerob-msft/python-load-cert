from flask import Flask, render_template_string
import os
import glob
import datetime
import subprocess
import OpenSSL.crypto as crypto

app = Flask(__name__)

HTML_TEMPLATE = '''
<!DOCTYPE html>
<html>
<head>
    <title>Azure App Service Certificates</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            line-height: 1.6;
        }
        h1 {
            color: #0078D4;
            border-bottom: 2px solid #0078D4;
            padding-bottom: 10px;
        }
        h2 {
            color: #505050;
            margin-top: 30px;
        }
        .cert-container {
            margin-bottom: 30px;
        }
        .cert {
            background-color: #f5f5f5;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
        }
        .cert-name {
            font-weight: bold;
            font-size: 18px;
            margin-bottom: 10px;
        }
        .cert-details {
            margin-left: 15px;
        }
        .cert-item {
            margin-bottom: 8px;
        }
        .cert-path {
            font-family: monospace;
            color: #555;
        }
        .error {
            color: #D83B01;
            font-style: italic;
        }
        .no-certs {
            color: #666;
            font-style: italic;
        }
        .status-valid {
            color: #107C10;
        }
        .status-warning {
            color: #D83B01;
        }
        .status-expired {
            color: #D83B01;
            font-weight: bold;
        }
        .timestamp {
            font-size: 0.9em;
            color: #666;
            margin-bottom: 20px;
        }
        .user-info {
            font-size: 0.9em;
            color: #666;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <h1>Azure App Service Certificate Inventory</h1>
    
    <div class="timestamp">Generated on: {{ current_time }}</div>
    <div class="user-info">Generated by: {{ current_user }}</div>
    <p>Hostname: {{ hostname }}</p>
    
    <div class="cert-container">
        <h2>Public Certificates (DER format)</h2>
        {% if public_certs %}
            {% for cert in public_certs %}
                <div class="cert">
                    <div class="cert-name">{{ cert.name }}</div>
                    <div class="cert-path">{{ cert.path }}</div>
                    <div class="cert-details">
                        {% if cert.error %}
                            <div class="error">{{ cert.error }}</div>
                        {% else %}
                            <div class="cert-item">Subject: {{ cert.subject }}</div>
                            <div class="cert-item">Issuer: {{ cert.issuer }}</div>
                            <div class="cert-item">Serial Number: {{ cert.serial }}</div>
                            <div class="cert-item">Valid From: {{ cert.valid_from }}</div>
                            <div class="cert-item">Valid Until: {{ cert.valid_until }}</div>
                            <div class="cert-item">
                                Status: 
                                {% if cert.status == "Valid" %}
                                    <span class="status-valid">{{ cert.status }}</span>
                                {% elif cert.status == "Warning" %}
                                    <span class="status-warning">{{ cert.status }} (Expires in {{ cert.days_left }} days)</span>
                                {% else %}
                                    <span class="status-expired">{{ cert.status }}</span>
                                {% endif %}
                            </div>
                            <div class="cert-item">Fingerprint (SHA1): {{ cert.fingerprint }}</div>
                        {% endif %}
                    </div>
                </div>
            {% endfor %}
        {% else %}
            <div class="no-certs">No public certificates found</div>
        {% endif %}
    </div>
    
    <div class="cert-container">
        <h2>Private Certificates (P12 format)</h2>
        {% if private_certs %}
            {% for cert in private_certs %}
                <div class="cert">
                    <div class="cert-name">{{ cert.name }}</div>
                    <div class="cert-path">{{ cert.path }}</div>
                    <div class="cert-details">
                        {% if cert.error %}
                            <div class="error">{{ cert.error }}</div>
                        {% else %}
                            <div class="cert-item">Certificate Type: {{ cert.cert_type }}</div>
                            <div class="cert-item">File Size: {{ cert.file_size }} bytes</div>
                            <div class="cert-item">Last Modified: {{ cert.last_modified }}</div>
                            {% if cert.p12_info %}
                                <div class="cert-item">P12 Content: {{ cert.p12_info }}</div>
                            {% endif %}
                        {% endif %}
                    </div>
                </div>
            {% endfor %}
        {% else %}
            <div class="no-certs">No private certificates found</div>
        {% endif %}
    </div>
    
    <div class="cert-container">
        <h2>Environment Information</h2>
        <div class="cert">
            <div class="cert-details">
                <div class="cert-item">WEBSITE_LOAD_CERTIFICATES: {{ cert_env_var }}</div>
                <div class="cert-item">App Service SSL Settings: {{ ssl_settings }}</div>
                <div class="cert-item">Total Public Certificates: {{ public_certs|length }}</div>
                <div class="cert-item">Total Private Certificates: {{ private_certs|length }}</div>
            </div>
        </div>
    </div>
</body>
</html>
'''

# Using EXACTLY the certificate processing function you provided 
def get_certificate_info(cert_path):
    try:
        with open(cert_path, 'rb') as cert_file:
            cert_data = cert_file.read()

        if cert_path.endswith('.pfx'):
            # For PFX files, we can't easily extract info without a password
            # Just return basic info
            return {
                'name': os.path.basename(cert_path),
                'path': cert_path,
                'subject': 'PFX file (password protected)',
                'issuer': 'Unknown (PFX format)',
                'serial': 'Unknown',
                'valid_from': 'Unknown',
                'valid_until': 'Unknown',
                'status': 'Unknown',
                'days_left': 'Unknown',
                'fingerprint': 'Unknown'
            }

        try:
            # Try to load as a PEM certificate
            cert = crypto.load_certificate(crypto.FILETYPE_PEM, cert_data)
        except crypto.Error:
            try:
                # Try to load as a DER certificate
                cert = crypto.load_certificate(crypto.FILETYPE_ASN1, cert_data)
            except crypto.Error:
                return {
                    'name': os.path.basename(cert_path),
                    'path': cert_path,
                    'error': 'Unable to parse certificate format'
                }

        # Extract certificate details
        subject = ", ".join([f"{name.decode()}={value.decode()}" 
                            for name, value in cert.get_subject().get_components()])
        issuer = ", ".join([f"{name.decode()}={value.decode()}" 
                          for name, value in cert.get_issuer().get_components()])

        # Get validity dates
        not_before = datetime.datetime.strptime(cert.get_notBefore().decode(), "%Y%m%d%H%M%SZ")
        not_after = datetime.datetime.strptime(cert.get_notAfter().decode(), "%Y%m%d%H%M%SZ")

        # Calculate days left and status
        now = datetime.datetime.utcnow()
        days_left = (not_after - now).days

        if now > not_after:
            status = "Expired"
        elif days_left < 30:
            status = "Warning"
        else:
            status = "Valid"

        # Get fingerprint
        fingerprint = cert.digest("sha1").decode()

        return {
            'name': os.path.basename(cert_path),
            'path': cert_path,
            'subject': subject,
            'issuer': issuer,
            'serial': format(cert.get_serial_number(), 'x'),
            'valid_from': not_before.strftime("%Y-%m-%d %H:%M:%S UTC"),
            'valid_until': not_after.strftime("%Y-%m-%d %H:%M:%S UTC"),
            'status': status,
            'days_left': days_left,
            'fingerprint': fingerprint
        }
    except Exception as e:
        return {
            'name': os.path.basename(cert_path),
            'path': cert_path,
            'error': f"Error processing certificate: {str(e)}"
        }

def get_p12_certificate_info(cert_path):
    try:
        # For P12 files, we can't easily extract info without a password
        # Return basic file information instead
        file_stats = os.stat(cert_path)
        file_size = file_stats.st_size
        last_modified = datetime.datetime.fromtimestamp(file_stats.st_mtime).strftime("%Y-%m-%d %H:%M:%S")
        
        p12_info = None
        try:
            # Try to get summary info
            process = subprocess.run(
                ['openssl', 'pkcs12', '-info', '-in', cert_path, '-nokeys', '-noout', '-passin', 'pass:'],
                capture_output=True, text=True, timeout=3
            )
            if process.returncode == 0:
                p12_info = "Certificate store (password protected)"
            else:
                # Try to count certificates in the P12 file without a password
                process = subprocess.run(
                    ['openssl', 'pkcs12', '-in', cert_path, '-nokeys', '-nomacver', '-passin', 'pass:'],
                    capture_output=True, text=True, timeout=3
                )
                if "MAC verified" in process.stdout:
                    p12_info = "Contains certificates (empty password)"
                elif "PKCS7" in process.stdout:
                    p12_info = "Contains PKCS7 certificates"
        except:
            p12_info = "Unable to examine P12 content (password protected)"
                
        return {
            'name': os.path.basename(cert_path),
            'path': cert_path,
            'cert_type': 'PKCS#12 (P12) Certificate Store',
            'file_size': file_size,
            'last_modified': last_modified,
            'p12_info': p12_info
        }
    except Exception as e:
        return {
            'name': os.path.basename(cert_path),
            'path': cert_path,
            'error': f"Error processing P12 certificate: {str(e)}"
        }

def find_certificates():
    # Specific certificate paths based on user feedback
    public_cert_path = "/var/ssl/certs/*.der"
    private_cert_path = "/var/ssl/private/*.p12"
    
    public_certs = []
    for cert_path in glob.glob(public_cert_path):
        public_certs.append(get_certificate_info(cert_path))
    
    private_certs = []
    for cert_path in glob.glob(private_cert_path):
        private_certs.append(get_p12_certificate_info(cert_path))
    
    return public_certs, private_certs

def get_ssl_settings():
    try:
        # Try to use App Service-specific SSL settings command if available
        result = subprocess.run(['/opt/appservice/ssl-settings', 'list'], 
                              capture_output=True, text=True, timeout=5)
        if result.returncode == 0:
            return result.stdout.strip()
        
        # Alternative method to get TLS settings
        result = subprocess.run(['curl', '-s', 'http://localhost:8881/appservice/ssl-settings'],
                              capture_output=True, text=True, timeout=5)
        if result.returncode == 0 and result.stdout.strip():
            return result.stdout.strip()
            
        return "Not available (command not found or failed)"
    except:
        return "Not available (error running command)"

@app.route('/')
def home():
    public_certs, private_certs = find_certificates()
    
    hostname = "Unknown"
    try:
        hostname = os.environ.get('WEBSITE_HOSTNAME', subprocess.check_output(['hostname']).decode().strip())
    except:
        pass
    
    cert_env_var = os.environ.get('WEBSITE_LOAD_CERTIFICATES', 'Not set')
    
    return render_template_string(HTML_TEMPLATE, 
                                 public_certs=public_certs,
                                 private_certs=private_certs,
                                 current_time="2025-04-23 20:25:30",  # Using the updated time
                                 current_user="joerob-msft",  # Using the provided username
                                 hostname=hostname,
                                 cert_env_var=cert_env_var,
                                 ssl_settings=get_ssl_settings())

if __name__ == '__main__':
    # When running locally, use debug mode
    if os.environ.get('WEBSITE_HOSTNAME') is None:
        app.run(debug=True, port=5000)
    else:
        # In production, use the production server
        app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 8080)))
